cmake_minimum_required (VERSION 3.1)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set (CMAKE_C_STANDARD 11)
set (CMAKE_CXX_STANDARD 17)
set (CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME})

project (Engine3d)  

include(CPlatform.txt)
include(default_lists.cmake)

set(LOCAL_PATH ${CMAKE_SOURCE_DIR})
set(THIS_PATH ${LOCAL_PATH})
set(ROOT_PATH ${THIS_PATH} CACHE INTERNAL "ROOT_PATH")

IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
	MESSAGE(STATUS "target platform: Linux ")
	set(PLATFORM "LINUX")
	set(PLATFORM_LONG "__LINUX__")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
	MESSAGE(STATUS "target platform: Windows")
	set(PLATFORM "WINDOWS")
    set(PLATFORM_LONG "__WINDOWS__")

    # MESSAGE("CMAKE_DEBUG_POSTFIX: " ${CMAKE_DEBUG_POSTFIX})
    if(NOT CMAKE_DEBUG_POSTFIX)
        set(CMAKE_DEBUG_POSTFIX _d CACHE STRING "debug postfix")
        set(CMAKE_EDITOR_DEBUG_POSTFIX _d CACHE STRING "editor debug postfix")
    endif()
    
    if(CMAKE_CONFIGURATION_TYPES)
        set(CMAKE_CONFIGURATION_TYPES Debug Release Editor_Debug Editor_Release)
        set(CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING
            "Reset the configurations to what we need" FORCE)
        set(CMAKE_CXX_FLAGS_EDITOR_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /RTC1" CACHE STRING "editor debug cxx flags" FORCE)
        set(CMAKE_SHARED_LINKER_FLAGS_EDITOR_DEBUG ${CMAKE_SHARED_LINKER_FLAGS_PROFILE} CACHE STRING "editor debug shared flags" FORCE)
        set(CMAKE_SHARED_LINKER_FLAGS_EDITOR_RELEASE ${CMAKE_SHARED_LINKER_FLAGS} CACHE STRING "editor release shared flags" FORCE)
        set(CMAKE_EXE_LINKER_FLAGS_EDITOR_DEBUG ${CMAKE_SHARED_LINKER_FLAGS} CACHE STRING "editor debug exe flags" FORCE)
        set(CMAKE_EXE_LINKER_FLAGS_EDITOR_RELEASE ${CMAKE_SHARED_LINKER_FLAGS} CACHE STRING "editor release exe flags" FORCE)
    endif()
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
	MESSAGE(STATUS "target platform: FreeBSD")
	set(PLATFORM "FREEBSD")
	set(PLATFORM_LONG "__FREEBSD__")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Android")
	MESSAGE(STATUS "target platform: Android")
	set(PLATFORM "ANDROID")
    set(PLATFORM_LONG "__ANDROID__")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "iOS")
    set(PLATFORM "IOS")
    set(PLATFORM_LONG "__APPLE__")	
    set (CMAKE_CXX_STANDARD 11)
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
    set (VENUS_LIBRARY_TYPE OBJECT)
    set (VENUS_LIBRARY_TYPE_BY_PLATFORM OBJECT)
    set (CMAKE_XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_WEAK "YES")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    MESSAGE(STATUS "target platform: mac os")
    if(NOT CMAKE_DEBUG_POSTFIX)
        set(CMAKE_DEBUG_POSTFIX _d CACHE STRING "debug postfix")
        set(CMAKE_EDITOR_DEBUG_POSTFIX _d CACHE STRING "editor debug postfix")
    endif()
    
    if(CMAKE_CONFIGURATION_TYPES)
        set(CMAKE_CONFIGURATION_TYPES Debug Release Editor_Debug Editor_Release)
        set(CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING
            "Reset the configurations to what we need" FORCE)
        set(CMAKE_CXX_FLAGS_EDITOR_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /RTC1" CACHE STRING "editor debug cxx flags" FORCE)
        set(CMAKE_SHARED_LINKER_FLAGS_EDITOR_DEBUG ${CMAKE_SHARED_LINKER_FLAGS_PROFILE} CACHE STRING "editor debug shared flags" FORCE)
        set(CMAKE_SHARED_LINKER_FLAGS_EDITOR_RELEASE ${CMAKE_SHARED_LINKER_FLAGS} CACHE STRING "editor release shared flags" FORCE)
        set(CMAKE_EXE_LINKER_FLAGS_EDITOR_DEBUG ${CMAKE_SHARED_LINKER_FLAGS} CACHE STRING "editor debug exe flags" FORCE)
        set(CMAKE_EXE_LINKER_FLAGS_EDITOR_RELEASE ${CMAKE_SHARED_LINKER_FLAGS} CACHE STRING "editor release exe flags" FORCE)
    endif()
ELSE ()
	MESSAGE(STATUS "other target platform: ${CMAKE_SYSTEM_NAME}")
	set(PLATFORM "OTHER")
	set(PLATFORM_LONG "__OTHER__")
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")

list(APPEND BUILD_LIST_ALL ${BUILD_LIST_WINDOWS})
list(APPEND LINK_LIST_ALL ${LINK_LIST_WINDOWS})
list(LENGTH BUILD_LIST_ALL build_list_size)
foreach(i RANGE 0 ${build_list_size} 2)
    if(${i} EQUAL ${build_list_size})
        break()
    endif()
    math(EXPR i1 "${i}+1")
    list(GET BUILD_LIST_ALL ${i} source_dir)
    list(GET BUILD_LIST_ALL ${i1} binary_dir)
    add_subdirectory(${source_dir} ${binary_dir})
endforeach()
 
