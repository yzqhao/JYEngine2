// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GENERIC_VFBS_H_
#define FLATBUFFERS_GENERATED_GENERIC_VFBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

namespace vfbs {

struct Member;
struct MemberBuilder;

struct TNull;
struct TNullBuilder;

struct TBool;
struct TBoolBuilder;

struct TShort;
struct TShortBuilder;

struct TUShort;
struct TUShortBuilder;

struct TInt;
struct TIntBuilder;

struct TUInt;
struct TUIntBuilder;

struct TFloat;
struct TFloatBuilder;

struct TDouble;
struct TDoubleBuilder;

struct TInt64;
struct TInt64Builder;

struct TUInt64;
struct TUInt64Builder;

struct TString;
struct TStringBuilder;

struct TRefrence;
struct TRefrenceBuilder;

struct TNative;
struct TNativeBuilder;

struct TClass;
struct TClassBuilder;

enum Type : uint8_t {
  Type_NONE = 0,
  Type_TNull = 1,
  Type_TBool = 2,
  Type_TShort = 3,
  Type_TUShort = 4,
  Type_TInt = 5,
  Type_TUInt = 6,
  Type_TFloat = 7,
  Type_TDouble = 8,
  Type_TString = 9,
  Type_TNative = 10,
  Type_TClass = 11,
  Type_TInt64 = 12,
  Type_TUInt64 = 13,
  Type_TRefrence = 14,
  Type_MIN = Type_NONE,
  Type_MAX = Type_TRefrence
};

inline const Type (&EnumValuesType())[15] {
  static const Type values[] = {
    Type_NONE,
    Type_TNull,
    Type_TBool,
    Type_TShort,
    Type_TUShort,
    Type_TInt,
    Type_TUInt,
    Type_TFloat,
    Type_TDouble,
    Type_TString,
    Type_TNative,
    Type_TClass,
    Type_TInt64,
    Type_TUInt64,
    Type_TRefrence
  };
  return values;
}

inline const char * const *EnumNamesType() {
  static const char * const names[16] = {
    "NONE",
    "TNull",
    "TBool",
    "TShort",
    "TUShort",
    "TInt",
    "TUInt",
    "TFloat",
    "TDouble",
    "TString",
    "TNative",
    "TClass",
    "TInt64",
    "TUInt64",
    "TRefrence",
    nullptr
  };
  return names;
}

inline const char *EnumNameType(Type e) {
  if (flatbuffers::IsOutRange(e, Type_NONE, Type_TRefrence)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesType()[index];
}

template<typename T> struct TypeTraits {
  static const Type enum_value = Type_NONE;
};

template<> struct TypeTraits<vfbs::TNull> {
  static const Type enum_value = Type_TNull;
};

template<> struct TypeTraits<vfbs::TBool> {
  static const Type enum_value = Type_TBool;
};

template<> struct TypeTraits<vfbs::TShort> {
  static const Type enum_value = Type_TShort;
};

template<> struct TypeTraits<vfbs::TUShort> {
  static const Type enum_value = Type_TUShort;
};

template<> struct TypeTraits<vfbs::TInt> {
  static const Type enum_value = Type_TInt;
};

template<> struct TypeTraits<vfbs::TUInt> {
  static const Type enum_value = Type_TUInt;
};

template<> struct TypeTraits<vfbs::TFloat> {
  static const Type enum_value = Type_TFloat;
};

template<> struct TypeTraits<vfbs::TDouble> {
  static const Type enum_value = Type_TDouble;
};

template<> struct TypeTraits<vfbs::TString> {
  static const Type enum_value = Type_TString;
};

template<> struct TypeTraits<vfbs::TNative> {
  static const Type enum_value = Type_TNative;
};

template<> struct TypeTraits<vfbs::TClass> {
  static const Type enum_value = Type_TClass;
};

template<> struct TypeTraits<vfbs::TInt64> {
  static const Type enum_value = Type_TInt64;
};

template<> struct TypeTraits<vfbs::TUInt64> {
  static const Type enum_value = Type_TUInt64;
};

template<> struct TypeTraits<vfbs::TRefrence> {
  static const Type enum_value = Type_TRefrence;
};

bool VerifyType(flatbuffers::Verifier &verifier, const void *obj, Type type);
bool VerifyTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Member FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MemberBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY_TYPE = 4,
    VT_KEY = 6,
    VT_VALUE_TYPE = 8,
    VT_VALUE = 10
  };
  vfbs::Type key_type() const {
    return static_cast<vfbs::Type>(GetField<uint8_t>(VT_KEY_TYPE, 0));
  }
  const void *key() const {
    return GetPointer<const void *>(VT_KEY);
  }
  template<typename T> const T *key_as() const;
  const vfbs::TNull *key_as_TNull() const {
    return key_type() == vfbs::Type_TNull ? static_cast<const vfbs::TNull *>(key()) : nullptr;
  }
  const vfbs::TBool *key_as_TBool() const {
    return key_type() == vfbs::Type_TBool ? static_cast<const vfbs::TBool *>(key()) : nullptr;
  }
  const vfbs::TShort *key_as_TShort() const {
    return key_type() == vfbs::Type_TShort ? static_cast<const vfbs::TShort *>(key()) : nullptr;
  }
  const vfbs::TUShort *key_as_TUShort() const {
    return key_type() == vfbs::Type_TUShort ? static_cast<const vfbs::TUShort *>(key()) : nullptr;
  }
  const vfbs::TInt *key_as_TInt() const {
    return key_type() == vfbs::Type_TInt ? static_cast<const vfbs::TInt *>(key()) : nullptr;
  }
  const vfbs::TUInt *key_as_TUInt() const {
    return key_type() == vfbs::Type_TUInt ? static_cast<const vfbs::TUInt *>(key()) : nullptr;
  }
  const vfbs::TFloat *key_as_TFloat() const {
    return key_type() == vfbs::Type_TFloat ? static_cast<const vfbs::TFloat *>(key()) : nullptr;
  }
  const vfbs::TDouble *key_as_TDouble() const {
    return key_type() == vfbs::Type_TDouble ? static_cast<const vfbs::TDouble *>(key()) : nullptr;
  }
  const vfbs::TString *key_as_TString() const {
    return key_type() == vfbs::Type_TString ? static_cast<const vfbs::TString *>(key()) : nullptr;
  }
  const vfbs::TNative *key_as_TNative() const {
    return key_type() == vfbs::Type_TNative ? static_cast<const vfbs::TNative *>(key()) : nullptr;
  }
  const vfbs::TClass *key_as_TClass() const {
    return key_type() == vfbs::Type_TClass ? static_cast<const vfbs::TClass *>(key()) : nullptr;
  }
  const vfbs::TInt64 *key_as_TInt64() const {
    return key_type() == vfbs::Type_TInt64 ? static_cast<const vfbs::TInt64 *>(key()) : nullptr;
  }
  const vfbs::TUInt64 *key_as_TUInt64() const {
    return key_type() == vfbs::Type_TUInt64 ? static_cast<const vfbs::TUInt64 *>(key()) : nullptr;
  }
  const vfbs::TRefrence *key_as_TRefrence() const {
    return key_type() == vfbs::Type_TRefrence ? static_cast<const vfbs::TRefrence *>(key()) : nullptr;
  }
  vfbs::Type value_type() const {
    return static_cast<vfbs::Type>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const vfbs::TNull *value_as_TNull() const {
    return value_type() == vfbs::Type_TNull ? static_cast<const vfbs::TNull *>(value()) : nullptr;
  }
  const vfbs::TBool *value_as_TBool() const {
    return value_type() == vfbs::Type_TBool ? static_cast<const vfbs::TBool *>(value()) : nullptr;
  }
  const vfbs::TShort *value_as_TShort() const {
    return value_type() == vfbs::Type_TShort ? static_cast<const vfbs::TShort *>(value()) : nullptr;
  }
  const vfbs::TUShort *value_as_TUShort() const {
    return value_type() == vfbs::Type_TUShort ? static_cast<const vfbs::TUShort *>(value()) : nullptr;
  }
  const vfbs::TInt *value_as_TInt() const {
    return value_type() == vfbs::Type_TInt ? static_cast<const vfbs::TInt *>(value()) : nullptr;
  }
  const vfbs::TUInt *value_as_TUInt() const {
    return value_type() == vfbs::Type_TUInt ? static_cast<const vfbs::TUInt *>(value()) : nullptr;
  }
  const vfbs::TFloat *value_as_TFloat() const {
    return value_type() == vfbs::Type_TFloat ? static_cast<const vfbs::TFloat *>(value()) : nullptr;
  }
  const vfbs::TDouble *value_as_TDouble() const {
    return value_type() == vfbs::Type_TDouble ? static_cast<const vfbs::TDouble *>(value()) : nullptr;
  }
  const vfbs::TString *value_as_TString() const {
    return value_type() == vfbs::Type_TString ? static_cast<const vfbs::TString *>(value()) : nullptr;
  }
  const vfbs::TNative *value_as_TNative() const {
    return value_type() == vfbs::Type_TNative ? static_cast<const vfbs::TNative *>(value()) : nullptr;
  }
  const vfbs::TClass *value_as_TClass() const {
    return value_type() == vfbs::Type_TClass ? static_cast<const vfbs::TClass *>(value()) : nullptr;
  }
  const vfbs::TInt64 *value_as_TInt64() const {
    return value_type() == vfbs::Type_TInt64 ? static_cast<const vfbs::TInt64 *>(value()) : nullptr;
  }
  const vfbs::TUInt64 *value_as_TUInt64() const {
    return value_type() == vfbs::Type_TUInt64 ? static_cast<const vfbs::TUInt64 *>(value()) : nullptr;
  }
  const vfbs::TRefrence *value_as_TRefrence() const {
    return value_type() == vfbs::Type_TRefrence ? static_cast<const vfbs::TRefrence *>(value()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_KEY_TYPE, 1) &&
           VerifyOffset(verifier, VT_KEY) &&
           VerifyType(verifier, key(), key_type()) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyType(verifier, value(), value_type()) &&
           verifier.EndTable();
  }
};

template<> inline const vfbs::TNull *Member::key_as<vfbs::TNull>() const {
  return key_as_TNull();
}

template<> inline const vfbs::TBool *Member::key_as<vfbs::TBool>() const {
  return key_as_TBool();
}

template<> inline const vfbs::TShort *Member::key_as<vfbs::TShort>() const {
  return key_as_TShort();
}

template<> inline const vfbs::TUShort *Member::key_as<vfbs::TUShort>() const {
  return key_as_TUShort();
}

template<> inline const vfbs::TInt *Member::key_as<vfbs::TInt>() const {
  return key_as_TInt();
}

template<> inline const vfbs::TUInt *Member::key_as<vfbs::TUInt>() const {
  return key_as_TUInt();
}

template<> inline const vfbs::TFloat *Member::key_as<vfbs::TFloat>() const {
  return key_as_TFloat();
}

template<> inline const vfbs::TDouble *Member::key_as<vfbs::TDouble>() const {
  return key_as_TDouble();
}

template<> inline const vfbs::TString *Member::key_as<vfbs::TString>() const {
  return key_as_TString();
}

template<> inline const vfbs::TNative *Member::key_as<vfbs::TNative>() const {
  return key_as_TNative();
}

template<> inline const vfbs::TClass *Member::key_as<vfbs::TClass>() const {
  return key_as_TClass();
}

template<> inline const vfbs::TInt64 *Member::key_as<vfbs::TInt64>() const {
  return key_as_TInt64();
}

template<> inline const vfbs::TUInt64 *Member::key_as<vfbs::TUInt64>() const {
  return key_as_TUInt64();
}

template<> inline const vfbs::TRefrence *Member::key_as<vfbs::TRefrence>() const {
  return key_as_TRefrence();
}

template<> inline const vfbs::TNull *Member::value_as<vfbs::TNull>() const {
  return value_as_TNull();
}

template<> inline const vfbs::TBool *Member::value_as<vfbs::TBool>() const {
  return value_as_TBool();
}

template<> inline const vfbs::TShort *Member::value_as<vfbs::TShort>() const {
  return value_as_TShort();
}

template<> inline const vfbs::TUShort *Member::value_as<vfbs::TUShort>() const {
  return value_as_TUShort();
}

template<> inline const vfbs::TInt *Member::value_as<vfbs::TInt>() const {
  return value_as_TInt();
}

template<> inline const vfbs::TUInt *Member::value_as<vfbs::TUInt>() const {
  return value_as_TUInt();
}

template<> inline const vfbs::TFloat *Member::value_as<vfbs::TFloat>() const {
  return value_as_TFloat();
}

template<> inline const vfbs::TDouble *Member::value_as<vfbs::TDouble>() const {
  return value_as_TDouble();
}

template<> inline const vfbs::TString *Member::value_as<vfbs::TString>() const {
  return value_as_TString();
}

template<> inline const vfbs::TNative *Member::value_as<vfbs::TNative>() const {
  return value_as_TNative();
}

template<> inline const vfbs::TClass *Member::value_as<vfbs::TClass>() const {
  return value_as_TClass();
}

template<> inline const vfbs::TInt64 *Member::value_as<vfbs::TInt64>() const {
  return value_as_TInt64();
}

template<> inline const vfbs::TUInt64 *Member::value_as<vfbs::TUInt64>() const {
  return value_as_TUInt64();
}

template<> inline const vfbs::TRefrence *Member::value_as<vfbs::TRefrence>() const {
  return value_as_TRefrence();
}

struct MemberBuilder {
  typedef Member Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key_type(vfbs::Type key_type) {
    fbb_.AddElement<uint8_t>(Member::VT_KEY_TYPE, static_cast<uint8_t>(key_type), 0);
  }
  void add_key(flatbuffers::Offset<void> key) {
    fbb_.AddOffset(Member::VT_KEY, key);
  }
  void add_value_type(vfbs::Type value_type) {
    fbb_.AddElement<uint8_t>(Member::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(flatbuffers::Offset<void> value) {
    fbb_.AddOffset(Member::VT_VALUE, value);
  }
  explicit MemberBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Member> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Member>(end);
    return o;
  }
};

inline flatbuffers::Offset<Member> CreateMember(
    flatbuffers::FlatBufferBuilder &_fbb,
    vfbs::Type key_type = vfbs::Type_NONE,
    flatbuffers::Offset<void> key = 0,
    vfbs::Type value_type = vfbs::Type_NONE,
    flatbuffers::Offset<void> value = 0) {
  MemberBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  builder_.add_value_type(value_type);
  builder_.add_key_type(key_type);
  return builder_.Finish();
}

struct TNull FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TNullBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct TNullBuilder {
  typedef TNull Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit TNullBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TNull> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TNull>(end);
    return o;
  }
};

inline flatbuffers::Offset<TNull> CreateTNull(
    flatbuffers::FlatBufferBuilder &_fbb) {
  TNullBuilder builder_(_fbb);
  return builder_.Finish();
}

struct TBool FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TBoolBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE, 1) &&
           verifier.EndTable();
  }
};

struct TBoolBuilder {
  typedef TBool Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(TBool::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  explicit TBoolBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TBool> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TBool>(end);
    return o;
  }
};

inline flatbuffers::Offset<TBool> CreateTBool(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool value = false) {
  TBoolBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TShort FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TShortBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int16_t value() const {
    return GetField<int16_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_VALUE, 2) &&
           verifier.EndTable();
  }
};

struct TShortBuilder {
  typedef TShort Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int16_t value) {
    fbb_.AddElement<int16_t>(TShort::VT_VALUE, value, 0);
  }
  explicit TShortBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TShort> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TShort>(end);
    return o;
  }
};

inline flatbuffers::Offset<TShort> CreateTShort(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t value = 0) {
  TShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TUShort FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TUShortBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint16_t value() const {
    return GetField<uint16_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_VALUE, 2) &&
           verifier.EndTable();
  }
};

struct TUShortBuilder {
  typedef TUShort Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint16_t value) {
    fbb_.AddElement<uint16_t>(TUShort::VT_VALUE, value, 0);
  }
  explicit TUShortBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TUShort> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TUShort>(end);
    return o;
  }
};

inline flatbuffers::Offset<TUShort> CreateTUShort(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t value = 0) {
  TUShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TInt FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TIntBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct TIntBuilder {
  typedef TInt Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(TInt::VT_VALUE, value, 0);
  }
  explicit TIntBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TInt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TInt>(end);
    return o;
  }
};

inline flatbuffers::Offset<TInt> CreateTInt(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t value = 0) {
  TIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TUInt FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TUIntBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint32_t value() const {
    return GetField<uint32_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct TUIntBuilder {
  typedef TUInt Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint32_t value) {
    fbb_.AddElement<uint32_t>(TUInt::VT_VALUE, value, 0);
  }
  explicit TUIntBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TUInt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TUInt>(end);
    return o;
  }
};

inline flatbuffers::Offset<TUInt> CreateTUInt(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t value = 0) {
  TUIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TFloat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TFloatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  float value() const {
    return GetField<float>(VT_VALUE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct TFloatBuilder {
  typedef TFloat Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(float value) {
    fbb_.AddElement<float>(TFloat::VT_VALUE, value, 0.0f);
  }
  explicit TFloatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TFloat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TFloat>(end);
    return o;
  }
};

inline flatbuffers::Offset<TFloat> CreateTFloat(
    flatbuffers::FlatBufferBuilder &_fbb,
    float value = 0.0f) {
  TFloatBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TDouble FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TDoubleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  double value() const {
    return GetField<double>(VT_VALUE, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
};

struct TDoubleBuilder {
  typedef TDouble Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(double value) {
    fbb_.AddElement<double>(TDouble::VT_VALUE, value, 0.0);
  }
  explicit TDoubleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TDouble> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TDouble>(end);
    return o;
  }
};

inline flatbuffers::Offset<TDouble> CreateTDouble(
    flatbuffers::FlatBufferBuilder &_fbb,
    double value = 0.0) {
  TDoubleBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TInt64 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TInt64Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int64_t value() const {
    return GetField<int64_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
};

struct TInt64Builder {
  typedef TInt64 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int64_t value) {
    fbb_.AddElement<int64_t>(TInt64::VT_VALUE, value, 0);
  }
  explicit TInt64Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TInt64> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TInt64>(end);
    return o;
  }
};

inline flatbuffers::Offset<TInt64> CreateTInt64(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t value = 0) {
  TInt64Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TUInt64 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TUInt64Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint64_t value() const {
    return GetField<uint64_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
};

struct TUInt64Builder {
  typedef TUInt64 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint64_t value) {
    fbb_.AddElement<uint64_t>(TUInt64::VT_VALUE, value, 0);
  }
  explicit TUInt64Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TUInt64> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TUInt64>(end);
    return o;
  }
};

inline flatbuffers::Offset<TUInt64> CreateTUInt64(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t value = 0) {
  TUInt64Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TString FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TStringBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const flatbuffers::String *value() const {
    return GetPointer<const flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct TStringBuilder {
  typedef TString Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::String> value) {
    fbb_.AddOffset(TString::VT_VALUE, value);
  }
  explicit TStringBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TString> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TString>(end);
    return o;
  }
};

inline flatbuffers::Offset<TString> CreateTString(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> value = 0) {
  TStringBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<TString> CreateTStringDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *value = nullptr) {
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return vfbs::CreateTString(
      _fbb,
      value__);
}

struct TRefrence FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TRefrenceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const flatbuffers::String *value() const {
    return GetPointer<const flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct TRefrenceBuilder {
  typedef TRefrence Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::String> value) {
    fbb_.AddOffset(TRefrence::VT_VALUE, value);
  }
  explicit TRefrenceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TRefrence> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TRefrence>(end);
    return o;
  }
};

inline flatbuffers::Offset<TRefrence> CreateTRefrence(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> value = 0) {
  TRefrenceBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<TRefrence> CreateTRefrenceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *value = nullptr) {
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return vfbs::CreateTRefrence(
      _fbb,
      value__);
}

struct TNative FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TNativeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FACTOR = 4,
    VT_VALUE = 6
  };
  int32_t factor() const {
    return GetField<int32_t>(VT_FACTOR, 0);
  }
  const flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_FACTOR, 4) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct TNativeBuilder {
  typedef TNative Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_factor(int32_t factor) {
    fbb_.AddElement<int32_t>(TNative::VT_FACTOR, factor, 0);
  }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(TNative::VT_VALUE, value);
  }
  explicit TNativeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TNative> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TNative>(end);
    return o;
  }
};

inline flatbuffers::Offset<TNative> CreateTNative(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t factor = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value = 0) {
  TNativeBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_factor(factor);
  return builder_.Finish();
}

inline flatbuffers::Offset<TNative> CreateTNativeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t factor = 0,
    const std::vector<uint8_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint8_t>(*value) : 0;
  return vfbs::CreateTNative(
      _fbb,
      factor,
      value__);
}

struct TClass FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TClassBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MEMBERS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<vfbs::Member>> *members() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<vfbs::Member>> *>(VT_MEMBERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MEMBERS) &&
           verifier.VerifyVector(members()) &&
           verifier.VerifyVectorOfTables(members()) &&
           verifier.EndTable();
  }
};

struct TClassBuilder {
  typedef TClass Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_members(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<vfbs::Member>>> members) {
    fbb_.AddOffset(TClass::VT_MEMBERS, members);
  }
  explicit TClassBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TClass> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TClass>(end);
    return o;
  }
};

inline flatbuffers::Offset<TClass> CreateTClass(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<vfbs::Member>>> members = 0) {
  TClassBuilder builder_(_fbb);
  builder_.add_members(members);
  return builder_.Finish();
}

inline flatbuffers::Offset<TClass> CreateTClassDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<vfbs::Member>> *members = nullptr) {
  auto members__ = members ? _fbb.CreateVector<flatbuffers::Offset<vfbs::Member>>(*members) : 0;
  return vfbs::CreateTClass(
      _fbb,
      members__);
}

inline bool VerifyType(flatbuffers::Verifier &verifier, const void *obj, Type type) {
  switch (type) {
    case Type_NONE: {
      return true;
    }
    case Type_TNull: {
      auto ptr = reinterpret_cast<const vfbs::TNull *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_TBool: {
      auto ptr = reinterpret_cast<const vfbs::TBool *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_TShort: {
      auto ptr = reinterpret_cast<const vfbs::TShort *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_TUShort: {
      auto ptr = reinterpret_cast<const vfbs::TUShort *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_TInt: {
      auto ptr = reinterpret_cast<const vfbs::TInt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_TUInt: {
      auto ptr = reinterpret_cast<const vfbs::TUInt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_TFloat: {
      auto ptr = reinterpret_cast<const vfbs::TFloat *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_TDouble: {
      auto ptr = reinterpret_cast<const vfbs::TDouble *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_TString: {
      auto ptr = reinterpret_cast<const vfbs::TString *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_TNative: {
      auto ptr = reinterpret_cast<const vfbs::TNative *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_TClass: {
      auto ptr = reinterpret_cast<const vfbs::TClass *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_TInt64: {
      auto ptr = reinterpret_cast<const vfbs::TInt64 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_TUInt64: {
      auto ptr = reinterpret_cast<const vfbs::TUInt64 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_TRefrence: {
      auto ptr = reinterpret_cast<const vfbs::TRefrence *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyType(
        verifier,  values->Get(i), types->GetEnum<Type>(i))) {
      return false;
    }
  }
  return true;
}

inline const vfbs::TClass *GetTClass(const void *buf) {
  return flatbuffers::GetRoot<vfbs::TClass>(buf);
}

inline const vfbs::TClass *GetSizePrefixedTClass(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<vfbs::TClass>(buf);
}

inline bool VerifyTClassBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<vfbs::TClass>(nullptr);
}

inline bool VerifySizePrefixedTClassBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<vfbs::TClass>(nullptr);
}

inline void FinishTClassBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<vfbs::TClass> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTClassBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<vfbs::TClass> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace vfbs

#endif  // FLATBUFFERS_GENERATED_GENERIC_VFBS_H_
