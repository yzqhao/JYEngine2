if ( MSVC )
  ADD_DEFINITIONS( -D_SCL_SECURE_NO_WARNINGS )
  ADD_DEFINITIONS( -D_CRT_SECURE_NO_WARNINGS )
endif ( MSVC )

# for c++ 17 
ADD_DEFINITIONS( -D_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING )

IF (CMAKE_BUILD_TYPE STREQUAL Debug)
    ADD_DEFINITIONS(-D_DEBUG)
	option(ENGINE_DEBUG "debug mode" ON)				# 是否编译成调试模式
ELSEIF (CMAKE_BUILD_TYPE STREQUAL "Editor_Debug")
    ADD_DEFINITIONS(-D_DEBUG)
	option(ENGINE_DEBUG "debug mode" ON)				# 是否编译成调试模式
ELSE()
    ADD_DEFINITIONS(-DNDEBUG)	
	option(ENGINE_DEBUG "debug mode" OFF)			
ENDIF()

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

ADD_DEFINITIONS(-D_USRDLL)

IF (CMAKE_SYSTEM_NAME MATCHES "Linux")				# 根据目标平台设置一些编译参数
	set(PLATFORM "LINUX")
	set(PLATFORM_LONG "__LINUX__")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
	set(PLATFORM "WINDOWS")
	set(PLATFORM_LONG "__WINDOWS__")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_PLATFORM_WINDOWS -DWIN32 /Zi" )
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_PLATFORM_WINDOWS -DWIN32 /Zi" )
	set (LIBRARY_TYPE_BY_PLATFORM SHARED)
	set (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /D \"_DEBUG\" /MDd /Od")
	set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /D \"_DEBUG\" /MDd /Od")
	set (CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /D \"NDEBUG\" /MD /O2")
	set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /D \"NDEBUG\" /MD /O2")
	set (CMAKE_C_FLAGS_EDITOR_DEBUG "${CMAKE_C_FLAGS_EDITOR_DEBUG} /D \"_EDITOR\" /D \"_DEBUG\" /MDd /Od")
	set (CMAKE_CXX_FLAGS_EDITOR_DEBUG "${CMAKE_CXX_FLAGS_EDITOR_DEBUG} /D \"_EDITOR\" /D \"_DEBUG\" /MDd /Od")
	set (CMAKE_C_FLAGS_EDITOR_RELEASE "${CMAKE_C_FLAGS_EDITOR_RELEASE} /D \"_EDITOR\" /D \"NDEBUG\" /MD /O2")
	set (CMAKE_CXX_FLAGS_EDITOR_RELEASE "${CMAKE_CXX_FLAGS_EDITOR_RELEASE} /D \"_EDITOR\" /D \"NDEBUG\" /MD /O2")
	add_compile_definitions (
        _PLATFORM_WINDOWS
	)
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
	set(PLATFORM "FREEBSD")
	set(PLATFORM_LONG "__FREEBSD__")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Android")
	set(PLATFORM "ANDROID")
    set(PLATFORM_LONG "__ANDROID__")	
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "iOS") 
	add_definitions($ENV{gcc_defines})
	set(PLATFORM "IOS")
    set(PLATFORM_LONG "__APPLE__")	
	set (CMAKE_CXX_STANDARD 11)
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
	set (LIBRARY_TYPE OBJECT)					# 用OBJECT好像会出现同名文件冲突的情况
	set (LIBRARY_TYPE_BY_PLATFORM OBJECT)
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Darwin")
	set (LIBRARY_TYPE_BY_PLATFORM SHARED)
	add_compile_definitions (
        _PLATFORM_MAC
	)
ELSE ()
	MESSAGE(STATUS "other platform: ${CMAKE_SYSTEM_NAME}")
	set(PLATFORM "OTHER")
	set(PLATFORM_LONG "__OTHER__")
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -D${PLATFORM} -D${PLATFORM_LONG}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -D${PLATFORM} -D${PLATFORM_LONG}")